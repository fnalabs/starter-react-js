#! /usr/bin/env node
const fs = require('fs')
const penthouse = require('penthouse')
const puppeteer = require('puppeteer')

const meta = require('../src/metadata.json')

// get manifest
const webpackManifest = fs.existsSync('./dist/server/manifest.json')
  ? JSON.parse(fs.readFileSync('./dist/server/manifest.json'))
  : {}
const cssString = fs.existsSync(`./dist/client/${webpackManifest['main.css']}`)
  ? Buffer.from(fs.readFileSync(`./dist/client/${webpackManifest['main.css']}`)).toString('utf8')
  : ''

// configure penthouse
const browserPromise = puppeteer.launch({
  args: ['--no-sandbox', '--headless', '--disable-gpu', '--disable-dev-shm-usage'],
  defaultViewport: {
    width: 767,
    height: 900
  },
  executablePath: '/usr/bin/chromium-browser',
  headless: true
})
const penthouseOptions = {
  cssString,
  width: 767,
  height: 900,
  keepLargerMediaQueries: true,
  puppeteer: {
    getBrowser: () => browserPromise
  }
}
const pathRegExp = /^\//
const urls = []

// define urls from metadata
for (const key in meta) {
  if (pathRegExp.test(key)) urls.push({ path: key, name: meta[key].name })
}

// create 'css' directory if it doesn't exist
if (!fs.existsSync('./dist/server/css')) fs.mkdirSync('./dist/server/css')

// run penthouse
Promise.all(urls.map(url => {
  return penthouse({
    url: `http://localhost:3000${url.path}`,
    ...penthouseOptions
  }).then(criticalCss => {
    fs.writeFileSync(`./dist/server/css/${url.name}.css`, criticalCss)
  })
})).then(() => console.log('all done!'))
